let s:use = SvarUse()

" Editor {{{
" hop {{{ 快速跳转
silent! lua << EOF
require('hop').setup{
    match_mappings = { 'zh', 'zh_sc' },
    create_hl_autocmd = true
}
EOF
noremap s <Cmd>HopChar1MW<CR>
noremap f <Cmd>HopChar1CurrentLine<CR>
noremap <leader>ms <Cmd>HopChar2MW<CR>
noremap <leader><leader>s <Cmd>HopPatternMW<CR>
noremap <leader>j <Cmd>HopLineCursorMW<CR>
noremap <leader><leader>j <Cmd>HopLineMW<CR>
noremap <leader>mj <Cmd>HopLineStartMW<CR>
noremap <leader>mw <Cmd>HopWord<CR>
" }}}
" }}}

" Component {{{
" alpha {{{ 启动首页
silent! lua << EOF
local tmp = require('alpha.themes.startify')
tmp.section.header.val = function()
    if vim.fn.filereadable(vim.env.DotVimCache .. '/todo.md') == 1 then
        local todo = vim.fn.filter(vim.fn.readfile(vim.env.DotVimCache .. '/todo.md'), 'v:val !~ "\\m^[ \t]*$"')
        if vim.tbl_isempty(todo) then
            return ''
        end
        return todo
    else
        return ''
    end
end
tmp.section.bookmarks = {
    type = "group",
    val = {
        { type = "padding", val = 1 },
        { type = "text", val = "Bookmarks", opts = { hl = "SpecialComment" } },
        { type = "padding", val = 1 },
        { type = "group", val = {
            tmp.file_button("$DotVimDir/.init.vim", "c"),
            tmp.file_button("$NVimConfigDir/init.vim", "d"),
            tmp.file_button("$DotVimCache/todo.md", "o"),
        }},
    },
}
tmp.section.mru = {
    type = "group",
    val = {
        { type = "padding", val = 1 },
        { type = "text", val = "Recent Files", opts = { hl = "SpecialComment" } },
        { type = "padding", val = 1 },
        { type = "group", val = function() return { tmp.mru(0, false, 8) } end },
    },
}
tmp.config.layout = {
    { type = "padding", val = 1 },
    tmp.section.header,
    { type = "padding", val = 2 },
    tmp.section.top_buttons,
    tmp.section.bookmarks,
    tmp.section.mru,
    { type = "padding", val = 1 },
    tmp.section.bottom_buttons,
}
require('alpha').setup(tmp.config)
EOF
nnoremap <leader>su :Alpha<CR>
" }}}

" notify {{{ 消息提示
silent! lua << EOF
--require('notify').setup{ }
--vim.notify = require('notify')
EOF
" }}}

" dressing {{{ 字体图标
silent! lua << EOF
require('dressing').setup{
    input = { enabled = true },
    select = { enabled = true },
}
EOF
" }}}

" icon-picker {{{ 字体图标
silent! lua << EOF
require('icon-picker').setup{ disable_legacy_commands = true }
EOF
nnoremap <leader>ip <Cmd>IconPickerNormal alt_font symbols nerd_font emoji<CR>
nnoremap <leader>iP <Cmd>IconPickerYank alt_font symbols nerd_font emoji<CR>
inoremap <M-p> <Cmd>IconPickerInsert alt_font symbols nerd_font emoji<CR>
" }}}

" nvim-tree {{{ 目录树导航
let g:nvim_tree_show_icons = {
    \ 'git': 0,
    \ 'folders': 1,
    \ 'files': 1,
    \ 'folder_arrows': 1,
    \ }
silent! lua << EOF
local tcb = require('nvim-tree.config').nvim_tree_callback
require('nvim-tree').setup{
    view = {
        mappings = {
            custom_only = true,
            list = {
                { key = {'<CR>', 'o', '<2-LeftMouse>'},
                                 cb = tcb('edit') },
                { key = 'i'    , cb = tcb('vsplit') },
                { key = 'gi'   , cb = tcb('split') },
                { key = 't'    , cb = tcb('tabnew') },
                { key = '<Tab>', cb = tcb('preview') },
                { key = 'cd'   , cb = tcb('cd') },
                { key = 'u'    , cb = tcb('dir_up') },
                { key = 'K'    , cb = tcb('first_sibling') },
                { key = 'J'    , cb = tcb('last_sibling') },
                { key = '<C-p>', cb = tcb('prev_sibling') },
                { key = '<C-n>', cb = tcb('next_sibling') },
                { key = 'p'    , cb = tcb('parent_node') },
                { key = '.'    , cb = tcb('toggle_dotfiles') },
                { key = 'I'    , cb = tcb('toggle_ignored') },
                { key = 'r'    , cb = tcb('refresh') },
                { key = 'q'    , cb = tcb('close') },
                { key = '?'    , cb = tcb('toggle_help') },
                { key = 'O'    , cb = tcb('system_open') },
                { key = 'A'    , cb = tcb('create') },
                { key = 'D'    , cb = tcb('remove') },
                { key = 'R'    , cb = tcb('rename') },
                { key = '<C-r>', cb = tcb('full_rename') },
                { key = 'X'    , cb = tcb('cut') },
                { key = 'C'    , cb = tcb('copy') },
                { key = 'P'    , cb = tcb('paste') },
                { key = 'y'    , cb = tcb('copy_name') },
                { key = 'Y'    , cb = tcb('copy_absolute_path') },
            },
        },
    },
}
EOF
nnoremap <leader>tt :NvimTreeToggle<CR>
" }}}

" telescope {{{ 模糊查找
silent! lua << EOF
require('telescope').setup{
    defaults = {
        borderchars = { '─', '│', '─', '│', '┌', '┐', '┘', '└' },
        color_devicons = true,
        history = {
            path = vim.env.DotVimCache  .. '/telescope_history',
        },
        mappings = {
            i = {
                ['<M-j>'] = 'move_selection_next',
                ['<M-k>'] = 'move_selection_previous',
            },
        }
    }
}
EOF
nnoremap <leader><leader>n :Telescope<Space>
nnoremap <leader>nf :Telescope find_files<CR>
nnoremap <leader>nl :Telescope live_grep<CR>
nnoremap <leader>nm :Telescope oldfiles<CR>
" }}}
" }}}

" Coding {{{
" trouble {{{ 列表视图
silent! lua << EOF
require('trouble').setup{
    icons = true,
    action_keys = {
        jump_close = {'O'},
        toggle_fold = {'zA', 'za', 'o'},
    },
    auto_preview = false,
}
EOF
nnoremap <leader>vq :TroubleToggle quickfix<CR>
nnoremap <leader>vl :TroubleToggle loclist<CR>
" }}}

" colorizer {{{ 颜色预览
nnoremap <leader>tc :ColorizerToggle<CR>
" }}}

" treesitter {{{ 语法树
if s:use.treesitter
silent! lua << EOF
require('nvim-treesitter.configs').setup{
    parser_install_dir = vim.env.DotVimLocal,
    --ensure_installed = { 'c', 'cpp', 'rust', 'vim', 'lua', 'python', 'markdown', 'markdown_inline', },
    --auto_install = true,
    highlight = {
        enable = true,
        disable = { 'markdown', 'markdown_inline' },
        additional_vim_regex_highlighting = false,
    },
    indent = {
        enable = true,
        disable = { 'python' },
    },
    incremental_selection = {
        enable = true,
        keymaps = {
            init_selection = '<M-g>',
            node_incremental = '<M-g>',
            node_decremental = '<M-t>',
            scope_incremental = '<M-v>',
        },
    },
}
vim.opt.runtimepath:append(vim.env.DotVimLocal)
EOF
nnoremap <leader>sh :TSBufToggle highlight<CR>
nnoremap <leader>si :TSBufToggle indent<CR>
nnoremap <leader>ss :TSBufToggle incremental_selection<CR>
endif
" }}}
" }}}

" Utils {{{
" }}}
