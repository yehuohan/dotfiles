{
    /* coc */
    "suggest.autoTrigger": "always",
    "suggest.enablePreview": true,
    "diagnostic.enable": true,
    "diagnostic.level": "hint",
    "diagnostic.enableSign": true,
    "diagnostic.errorSign": "✘",
    "diagnostic.warningSign": "►",
    "diagnostic.infoSign": "►",
    "diagnostic.hintSign": "►",
    "diagnostic.messageTarget": "float",
    "diagnostic.virtualText": false,
    "diagnostic.virtualTextCurrentLineOnly": true,
    "diagnostic.virtualTextPrefix": "   ",
    "diagnostic.autoRefresh": true,
    "dialog.floatHighlight": "Normal",
    "dialog.floatBorderHighlight": "Normal",
    "signature.enable": true,
    "coc.source.file.enable": true,
    "coc.source.file.ignoreHidden": false,
    "coc.preferences.enableMessageDialog": true,
    "coc.preferences.promptInput": true,
    "coc.preferences.extensionUpdateCheck": "weekly",
    "coc.preferences.enableFloatHighlight": true,
    "coc.preferences.rootPatterns": [".popc", ".git", ".svn", ".hg"],
    "coc.preferences.jumpCommand": "edit",
    "list.nextKeymap": "<C-j>",
    "list.previousKeymap": "<C-k>",

    /* coc-lists(NOT in use) */
    //"session.saveOnVimLeave" : false,
    //"session.restartOnSessionLoad" : false,
    //"list.source.grep.command": "rg",

    /* coc-snippets */
    "snippets.ultisnips.enable": true,
    "snippets.ultisnips.directories": ["snips", "UltiSnips"],
    "snippets.snipmate.enable": false,

    /* coc-yank */
    "yank.highlight.enable": true,
    "yank.highlight.duration": 200,

    /* coc-lua */
    "lua.enable": true,
    "Lua.color.mode": "Semantic",
    "Lua.completion.enable": true,
    "Lua.runtime.version": "Lua 5.2",
    "Lua.diagnostics.globals": ["vim"],

    /* coc-pyright */
    "python.analysis.stubPath": "typings",

    /* coc-clangd */
    "clangd.enabled": true,
    "clangd.arguments": [], // arguments for clangd server
    "clangd.compilationDatabasePath": "", // specifies the directory containing the compilation database
    "clangd.fallbackFlags": [
        "-std=c++20",
        "-D__VBUILD__"
    ], // extra clang flags used to parse files when no compilation database is found
    "clangd.path": "clangd",

    /* coc-rust-analyzer */
    "rust-analyzer.enable": true,
    "rust-analyzer.updates.checkOnStartup": false,
    "rust-analyzer.updates.channel": "nightly",
    "rust-analyzer.cargo.allFeatures": true,
    "rust-analyzer.notifications.cargoTomlNotFound": false,
    "rust-analyzer.diagnostics.disabled": ["inactive-code"],
    "rust-analyzer.procMacro.enable": true,

    /* coc-java
     * required: download jdt.ls from https://download.eclipse.org/jdtls/snapshots
     */
    "java.enabled": true,

    /* coc-spell-checker */
    "cSpell.enabledLanguageIds": [
        "asciidoc",
        "latex",
        "less",
        "markdown",
        "plaintext",
        "restructuredtext",
        "text",
        "yaml",
        "yml"
    ],

    /* lsp */
    "languageserver": {
        /* install llvm or clangd(Not in use)
        "clangd": {
            "command": "clangd",
            "rootPatterns": ["compile_flags.txt", "compile_commands.json", "tags"],
            "filetypes": ["c", "cc", "cpp", "c++", "objc", "objcpp"]
        },
        */
        /* Not in use
        "julia": {
            "command": "julia",
            "args": [
                "--startup-file=no",
                "--history-file=no",
                "-e",
                "using LanguageServer;\n       using Pkg;\n       import StaticLint;\n       import SymbolServer;\n       env_path = dirname(Pkg.Types.Context().env.project_file);\n       debug = false;\n       server = LanguageServer.LanguageServerInstance(stdin, stdout, debug, env_path, \"\", Dict());\n       server.runlinter = true;\n       run(server);"
            ],
            "filetypes": ["julia"]
        }
        */
    }
}
